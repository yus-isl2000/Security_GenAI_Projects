
Here’s the rewritten specification with the requested adjustments:

Structured Specification Prompt for AI Assistant Webpage
Objective
To design and implement a modular AI assistant webpage and backend to support autonomous agents. These agents will handle email, calendar, task management, investigations, threat intelligence, and cyber threat hunting. The initial iteration will use Python dictionaries for simplicity instead of a database. Additionally, a new Workflow Alignment Agent will monitor computer usage through screenshots to align workflows with the dashboard, ensuring tasks and agents are updated dynamically based on the user’s implicit priorities.

Front-End Webpage Design
Overview of the Webpage Structure
Email and Calendar Module:

Displays the latest important emails and calendar events.
Summarizes critical items using an AI agent.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
To-Do List Module:

Organized into four categories:
Today.
Near-term.
Medium-term.
Long-term.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
Current Investigations Module:

Displays details of ongoing investigations.
Agent Tasks:
Perform queries.
Generate reports.
Track investigation progress.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
Threat Hunts Module:

Shows active threat hunts and their progress.
Agent Tasks:
Monitor threat intelligence feeds.
Query logs to identify anomalies.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
Threat Intel Research Module:

Displays summaries of trending topics in cyber threat intelligence.
Agent Tasks:
Continuously browse for hot topics.
Provide updates.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
Gap-Filling Agent Module:

Highlights areas where other agents require user input.
Allows the user to fill gaps manually.
Buttons:
Kick-start the agent.
Refresh the status.
Engage with the agent for input.
Workflow Alignment Agent Module (New):

Monitors computer usage (e.g., screenshots) to align workflows with dashboard tasks.
Agent Tasks:
Analyze screenshots to infer current activities.
Update the dashboard dynamically based on observed actions.
Reorder priorities based on the intuition that the user knows best.
Trigger updates or requests for input from other agents as needed.
Front-End Features:
Display recent activities and alignment status.
Allow the user to override or manually adjust the workflow alignment.
Buttons:
Enable/disable monitoring.
View alignment logs.
Coding Agent Module:

Dynamically creates Python code for new agents or missing functions.
Tasks:
Generate Python functions for backend agents.
Add new boxes/modules to the front-end automatically.
Update REST API endpoints to support new agents.
Buttons:
Request new agent.
View generated code.
Modular Approach
Each front-end module corresponds to a Python agent.
The layout is clean, with dynamic updates reflecting agent statuses.
The Workflow Alignment Agent ensures the dashboard remains in sync with the user’s activities.
Back-End Implementation Plan
Python Web Server
Framework: Use FastAPI for scalability and responsiveness.
Core Features:
Define endpoints for each agent.
Handle incoming requests to kick-start, refresh, or engage with agents.
Serve static content (HTML, CSS, JS) for the webpage.
Agent Logic
General Structure:

Each agent will be a Python class/module with specific capabilities.
Use Python dictionaries to store:
Tasks and their statuses.
Logs for investigations, hunts, and alignments.
Summaries for threat intelligence and calendar items.
Use the Gemini API for tasks requiring large language models.
Agent-Specific Tasks:

Email and Calendar Agent:
Connect to Outlook API to retrieve emails and calendar events.
Summarize important items using the Gemini API.
To-Do Agent:
Maintain a simple Python dictionary for categorized tasks.
Track task progress and provide updates.
Investigation Agent:
Integrate with log querying systems and report generation tools.
Automate repetitive investigation tasks.
Threat Hunt Agent:
Leverage threat intelligence APIs and log management systems.
Perform anomaly detection and generate insights.
Threat Intel Research Agent:
Continuously browse and summarize trending topics in cyber threat intelligence.
Gap-Filling Agent:
Monitor workflows for gaps and request user input.
Workflow Alignment Agent:
Capture screenshots periodically to analyze computer use.
Infer ongoing tasks and update the dashboard with the current step.
Trigger other agents to start, refresh, or request user input.
Reorder dashboard priorities based on user activity.
Coding Agent:
Analyze missing functionalities in other agents.
Autonomously generate Python functions to fill gaps.
Add new agents dynamically.
Modify front-end templates to include new modules.
Communication Protocol
Use REST APIs to facilitate communication between the front-end and the backend.
Define endpoints for each agent:
Start/stop operations.
Refresh status.
Handle user input.
The Workflow Alignment Agent exposes endpoints for:
Managing screenshot frequency.
Fetching inferred activities.
Overriding priorities.
Agent Workflow
Agents continuously loop and perform their tasks.
The Workflow Alignment Agent:
Captures screenshots using Python libraries like Pillow or mss.
Analyzes window titles and visual patterns to infer tasks.
Silently updates the dashboard to reflect user actions.
Ensures other agents are started, refreshed, or prompted at appropriate times.
Use APScheduler to manage periodic operations.
